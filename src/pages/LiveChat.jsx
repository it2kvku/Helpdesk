import React, { useState, useEffect, useRef } from 'react';
import { useAuth } from '../contexts/useAuth';
import './LiveChat.css';

const LiveChat = () => {
  const { user } = useAuth();
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);
  
  // Th√™m m·ªôt tin nh·∫Øn ch√†o m·ª´ng khi trang ƒë∆∞·ª£c t·∫£i
  useEffect(() => {
    setMessages([
      {
        id: 'welcome',
        text: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o IT Helpdesk. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay? B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ c√°c v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t ph·ªï bi·∫øn ho·∫∑c c√°ch s·ª≠ d·ª•ng h·ªá th·ªëng.',
        sender: 'bot',
        timestamp: new Date()
      }
    ]);
  }, []);

  // Cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // G·ª≠i tin nh·∫Øn t·ªõi Gemini API
  const sendToGemini = async (prompt) => {
    try {
      setIsLoading(true);
      
      const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-goog-api-key': import.meta.env.VITE_GEMINI_API_KEY
        },
        body: JSON.stringify({
          contents: [
            {
              role: "user",
              parts: [
                { 
                  text: `B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa IT Helpdesk, h·ªó tr·ª£ ng∆∞·ªùi d√πng v·ªõi c√°c v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. 
                  H√£y gi√∫p ƒë·ª° v·ªõi c√¢u h·ªèi sau ƒë√¢y, gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng v√† th√¢n thi·ªán.
                  S·ª≠ d·ª•ng ti·∫øng Vi·ªát trong c√¢u tr·∫£ l·ªùi.
                  N·∫øu b·∫°n kh√¥ng bi·∫øt c√¢u tr·∫£ l·ªùi, h√£y g·ª£i √Ω ng∆∞·ªùi d√πng t·∫°o phi·∫øu h·ªó tr·ª£ m·ªõi.
                  
                  C√¢u h·ªèi: ${prompt}`
                }
              ]
            }
          ]
        })
      });
      
      const data = await response.json();
      
      if (data.candidates && data.candidates[0]?.content?.parts[0]?.text) {
        return data.candidates[0].content.parts[0].text;
      } else if (data.error) {
        console.error('L·ªói t·ª´ Gemini API:', data.error);
        return `Xin l·ªói, t√¥i ƒëang g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t: ${data.error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}. Vui l√≤ng th·ª≠ l·∫°i sau.`;
      } else if (data.contents && data.contents[0]?.parts[0]?.text) {
        // Format m·ªõi c·ªßa Gemini API V1
        return data.contents[0].parts[0].text;
      } else {
        console.error('L·ªói ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi t·ª´ Gemini:', data);
        return 'Xin l·ªói, t√¥i ƒëang g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.';
      }
    } catch (error) {
      console.error('L·ªói khi g·ªçi Gemini API:', error);
      return 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.';
    } finally {
      setIsLoading(false);
    }
  };

  // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn
  const handleSend = async (e) => {
    e.preventDefault();
    
    if (!input.trim()) return;
    
    // Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
    const userMessage = {
      id: Date.now().toString(),
      text: input,
      sender: 'user',
      timestamp: new Date()
    };
    
    setMessages(prevMessages => [...prevMessages, userMessage]);
    setInput('');
    
    // Hi·ªÉn th·ªã tr·∫°ng th√°i "ƒëang nh·∫≠p"
    setIsLoading(true);
    
    // G·ªçi Gemini API
    const response = await sendToGemini(input);
    
    // Th√™m ph·∫£n h·ªìi t·ª´ bot
    const botMessage = {
      id: (Date.now() + 1).toString(),
      text: response,
      sender: 'bot',
      timestamp: new Date()
    };
    
    setMessages(prevMessages => [...prevMessages, botMessage]);
  };

  // Format th·ªùi gian
  const formatTime = (date) => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  return (
    <div className="chat-container">
      <div className="chat-header">
        <h1>Tr√≤ chuy·ªán tr·ª±c ti·∫øp</h1>
        <p>Tr·ª£ l√Ω AI s·∫Ω gi√∫p gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc c·ªßa b·∫°n</p>
      </div>
      
      <div className="chat-messages">
        {messages.map(message => (
          <div 
            key={message.id} 
            className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}
          >
            <div className="message-content">
              <div className="message-avatar">
                {message.sender === 'user' 
                  ? user?.user_metadata?.full_name?.charAt(0) || user?.email?.charAt(0) || 'U'
                  : 'A'}
              </div>
              <div className="message-bubble">
                <div className="message-text">{message.text}</div>
                <div className="message-time">{formatTime(message.timestamp)}</div>
              </div>
            </div>
          </div>
        ))}
        
        {isLoading && (
          <div className="message bot-message">
            <div className="message-content">
              <div className="message-avatar">A</div>
              <div className="message-bubble">
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>
      
      <form className="chat-input" onSubmit={handleSend}>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
          disabled={isLoading}
        />
        <button 
          type="submit" 
          className="btn btn-primary"
          disabled={isLoading || !input.trim()}
        >
          <span className="btn-icon">üì§</span>
          G·ª≠i
        </button>
      </form>
      
      <div className="chat-footer">
        <p>Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi b·∫°n c·∫ßn? <a href="/create-ticket">T·∫°o phi·∫øu h·ªó tr·ª£</a></p>
      </div>
    </div>
  );
};

export default LiveChat;
